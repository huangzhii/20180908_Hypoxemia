# all t_depth and t_alt_count are missing
# use information from vcf file instead
Tumor_R_HT77_p0 = vcf[,11] # based on Mark data
Tumor_R_HT77_p0
strsplit(Tumor_R_HT77_p0, ":")
as.data.frame(strsplit(Tumor_R_HT77_p0, ":"))
i = 1
Tumor_R_HT77_p0[[i]][2]
Tumor_R_HT77_p0[[i]]
Tumor_R_HT77_p0 = as.data.frame(strsplit(Tumor_R_HT77_p0, ":"))
Tumor_R_HT77_p0 = strsplit(Tumor_R_HT77_p0, ":")
Tumor_R_HT77_p0[[i]][2]
strsplit(mutect_AD,",")[1]
mutect_AD = Tumor_R_HT77_p0[[i]][2]
strsplit(mutect_AD,",")
strsplit(mutect_AD,",")[[1]]
as.numeric(strsplit(mutect_AD,",")[[1]][1])
runApp('Desktop/KnowledgeDatabase/shiny')
runApp('Desktop/KnowledgeDatabase/shiny')
runApp('Desktop/KnowledgeDatabase/shiny')
?verbatimTextOutput
library(shiny)
?verbatimTextOutput
library(R.matlab)
readMat("/home/zhihuan/Documents/panCancer/breast/RNASeq/rnaData.mat")
data = readMat("/home/zhihuan/Documents/panCancer/breast/RNASeq/rnaData.mat")
View(data)
View(data)
mat = rbind(data$geneId, data$rna)
mat = cbind(data$geneId, data$rna)
mat = rbind(c('', data$pid), mat)
dim(mat)
write.csv(mat,file="/home/zhihuan/Documents/panCancer/breast/RNASeq/data.csv")
mat = as.data.frame(mat)
View(mat)
head(mat)
dim(data$rna)
mat = cbind(data$geneId, t(data$rna))
mat = rbind(c('', data$pid), mat)
mat = as.data.frame(mat)
write.csv(mat,file="/home/zhihuan/Documents/panCancer/breast/RNASeq/TCGA_BRCA.csv")
head(mat)
mat[1:3,1:4]
View(mat)
data$geneId
unlist(data$geneId)
mat = cbind(unlist(data$geneId), t(data$rna))
mat = rbind(c('', unlist(data$pid)), mat)
mat = as.data.frame(mat)
?write.csv
write.csv(mat,file="/home/zhihuan/Documents/panCancer/breast/RNASeq/TCGA_BRCA.csv", row.names = F, col.names = F)
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
write.csv(mat,file="/home/zhihuan/Documents/panCancer/breast/RNASeq/TCGA_BRCA.csv", row.names = F, col.names = F)
mat[1:2,1:3]
colnames(mat)[1] = ""
mat[1:2,1:3]
write.csv(mat,file="/home/zhihuan/Documents/panCancer/breast/RNASeq/TCGA_BRCA.csv", row.names = F, col.names = F)
write.csv(mat,file="/home/zhihuan/Documents/panCancer/breast/RNASeq/TCGA_BRCA.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/bladder/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/bladder/RNASeq/TCGA_BRCA.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/kidney_KIRC/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/kidney_KIRC/RNASeq/TCGA_KIRC.csv", row.names = F, col.names = F,quote = F)
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("monocle")
library(monocle)
browseVignettes("monocle")
log(2.7)
log(2)
log2(2)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/cervix/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/cervix/RNASeq/TCGA-CESC.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/esophagus/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/esophagus/RNASeq/TCGA-ESCA.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/headAndNeck/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/headAndNeck/RNASeq/TCGA-HNSC.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/kidney_KIRC/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/kidney_KIRC/RNASeq/TCGA-KIRC.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/kidney_KIRP/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/kidney_KIRP/RNASeq/TCGA-KIRP.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/colon (no survival)/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/colon (no survival)/RNASeq/TCGA-COAD.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/liver/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/liver/RNASeq/TCGA-LIHC.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/lung_LUAD/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/lung_LUAD/RNASeq/TCGA-LUAD.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/lung_LUSC/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/lung_LUSC/RNASeq/TCGA-LUSC.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/ovary/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/ovary/RNASeq/TCGA-OV.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/pancreas/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/pancreas/RNASeq/TCGA-PDAC.csv", row.names = F, col.names = F,quote = F)
library(R.matlab)
data = readMat("/home/zhihuan/Documents/panCancer/stomach/RNASeq/rnaData.mat")
mat = cbind(unlist(data$geneId), t(data$rna))
colnames(mat) = c('', unlist(data$pid))
mat = as.data.frame(mat)
colnames(mat)[1] = ""
write.csv(mat,file="/home/zhihuan/Documents/panCancer/stomach/RNASeq/TCGA-STAD.csv", row.names = F, col.names = F,quote = F)
# Load DVEX using DistMap
setwd("~/Desktop/DreamChallenge2018/R/")
if(!require(DistMap)){
if(!require(devtools)) {
install.packages("devtools")
}
install_github("rajewsky-lab/DistMap")
}
library(DistMap)
if(!all(file.exists(c("dge_raw.txt.gz","dge_normalized.txt.gz","binarized_bdtnp.csv.gz","bdtnp.txt.gz","geometry.txt.gz")))){
download.file("http://bimsbstatic.mdc-berlin.de/rajewsky/DVEX/dge_raw.txt.gz",destfile = "dge_raw.txt.gz")
download.file("http://bimsbstatic.mdc-berlin.de/rajewsky/DVEX/dge_normalized.txt.gz",destfile = "dge_normalized.txt.gz")
download.file("http://bimsbstatic.mdc-berlin.de/rajewsky/DVEX/binarized_bdtnp.csv.gz",destfile = "binarized_bdtnp.csv.gz")
download.file("http://bimsbstatic.mdc-berlin.de/rajewsky/DVEX/bdtnp.txt.gz",destfile = "bdtnp.txt.gz")
download.file("http://bimsbstatic.mdc-berlin.de/rajewsky/DVEX/geometry.txt.gz",destfile = "geometry.txt.gz")
}
##########################################
# Import raw and normalised data
##########################################
raw.data = read.table(gzfile("dge_raw.txt.gz",'rt'),
sep = "\t",
row.names = NULL,
stringsAsFactors = F,
quote = "")
raw.data.genes = raw.data$V1
raw.data$V1 = NULL
# gene names with apostrophes
print(grep("'",raw.data.genes,value = T,fixed = T))
raw.data.genes = gsub("'","",raw.data.genes,fixed = T)
raw.data = as.matrix(raw.data)
rownames(raw.data) = raw.data.genes
# Repeat for the normalized data
normalized.data = read.table(gzfile("dge_normalized.txt.gz",'rt'),
sep = "\t",
row.names = NULL,
stringsAsFactors = F,
quote = "")
normalized.data.genes = normalized.data$row.names
normalized.data$row.names = NULL
print(grep("'",normalized.data.genes,value = T,fixed = T))
normalized.data.genes = gsub("'","",normalized.data.genes,fixed = T)
normalized.data = as.matrix(normalized.data)
rownames(normalized.data) = normalized.data.genes
# Check that the gene names are identical in the raw and normalised dataset
stopifnot(all(normalized.data.genes == raw.data.genes))
##########################################
# Import in situ datasets
##########################################
insitu.matrix = read.table(gzfile("binarized_bdtnp.csv.gz",'rt'), sep = ",",header = T)
insitu.genes_orig <- colnames(insitu.matrix)
# Match the gene names across datasets
# 2 gene names are not matched:s
missingGenes = insitu.genes_orig[which(!insitu.genes_orig %in% normalized.data.genes)]
print(missingGenes)
# this was reported by Nikos
# lets fix this by changing the . characters in the gene names to -
insitu.genes = gsub(".","-",insitu.genes_orig,fixed = T)
# also replace .spl. --> (spl)
insitu.genes = gsub("-spl-","(spl)",insitu.genes,fixed = T)
# assert that all institu genes appear in the gene names
stopifnot(all(insitu.genes %in% raw.data.genes))
# Now we can rename the genes in the institu.matrix with the correct names:
insitu.matrix = as.matrix(insitu.matrix)
colnames(insitu.matrix) = insitu.genes
##########################################
# Read geometry data
##########################################
# The column naming of the geometry is not consistent with distMap expectation, xcoord, ycoord and zcoord must be renamed to x, y, z
geometry = read.csv(gzfile("geometry.txt.gz",'rt'),sep = " ")
colnames(geometry) = c("x","y","z")
##########################################
# Run DistMap
##########################################
# here we just following the pipeline from https://github.com/rajewsky-lab/distmap/readme.md
dm = new("DistMap",
raw.data=raw.data,
data=normalized.data,
insitu.matrix=insitu.matrix,
geometry=as.matrix(geometry))
dm <- binarizeSingleCellData(dm, seq(0.15, 0.5, 0.01))
# export binarized data to csv file
write.table(dm@binarized.data,file = "binarizedData_distMap.csv",sep = ",",row.names = T,col.names = T)
dm <- mapCells(dm)
pha = computeVISH(dm, 'sna', threshold=0.75)
computeGeneGradient(dm, 'sna')
################# 3D plot the Geo
library(rgl)
geo = dm@geometry
max_positions = apply(dm@mcc.scores, 2, function(x) which.max(x))
##### New Estimation #####
dm2 = new("DistMap",
raw.data=raw.data,
data=normalized.data,
insitu.matrix=insitu.matrix[,1:60],
geometry=as.matrix(geometry))
dm2 <- binarizeSingleCellData(dm2, seq(0.15, 0.5, 0.01))
dm2 <- mapCells(dm2)
max_positions2 = apply(dm2@mcc.scores, 2, function(x) which.max(x))
mut_positions = intersect(max_positions, max_positions2)
##### New Estimation #####
color = rep("grey", length(geo[,1]))
color[max_positions] = "red"
color[max_positions2] = "green"
color[mut_positions] = "orange"
plot3d(geo[,1],geo[,2],geo[,3], col = color, aspect = F)
View(dm2)
64*64
################# 3D plot the Geo
if(!require(rgl)) {
install.packages("rgl")
}
library(rgl)
geo = dm@geometry
max_positions = apply(dm@mcc.scores, 2, function(x) which.max(x))
##### New Estimation #####
dm2 = new("DistMap",
raw.data=raw.data[rownames(raw.data) %in% insitu.genes, ],
data=normalized.data[rownames(raw.data) %in% insitu.genes, ],
insitu.matrix=insitu.matrix,
geometry=as.matrix(geometry))
dm2 <- binarizeSingleCellData(dm2, seq(0.15, 0.5, 0.01))
dm2 <- mapCells(dm2)
max_positions2 = apply(dm2@mcc.scores, 2, function(x) which.max(x))
mut_positions = intersect(max_positions, max_positions2)
##### New Estimation #####
color = rep("grey", length(geo[,1]))
color[max_positions] = "red"
color[max_positions2] = "green"
color[mut_positions] = "orange"
plot3d(geo[,1],geo[,2],geo[,3], col = color, aspect = F)
r.d = raw.data[rownames(raw.data) %in% insitu.genes, ]
n.d = normalized.data[rownames(raw.data) %in% insitu.genes, ]
##### New Estimation #####
r.d = data.frame(raw.data[rownames(raw.data) %in% insitu.genes, ])
n.d = data.frame(normalized.data[rownames(raw.data) %in% insitu.genes, ])
View(r.d)
gse <- getGEO('GSE10')
gse <- getGEO('GSE10')
??getGEO
import(GEOquery)
library(GEOquery)
gse <- getGEO('GSE10')
?getGEO
#**************************************************************************
library(SingleCellExperiment)
library(SummarizedExperiment)
library(MetaNeighbor)
library(Matrix)
#**************************************************************************
library(SingleCellExperiment)
install.packages("SingleCellExperiment")
source("https://bioconductor.org/biocLite.R")
biocLite("SingleCellExperiment")
source("https://bioconductor.org/biocLite.R")
biocLite("SummarizedExperiment")
#**************************************************************************
library(SingleCellExperiment)
library(SummarizedExperiment)
library(MetaNeighbor)
library(Matrix)
source("https://bioconductor.org/biocLite.R")
biocLite("MetaNeighbor")
install.packages("MetaNeighbor")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MetaNeighbor", version = "devel")
install.packages("BiocManager")
install.packages("BiocManager")
library(devtools)
install_github("maggiecrow/MetaNeighbor")
source("https://bioconductor.org/biocLite.R")
biocLite("MetaNeighbor")
# library(MetaNeighbor)
library(Matrix)
#**************************************************************************
# Load pancreas data
dat.panc = read.csv('~/Desktop/pancreas/pancreasXexpr.csv',header=F)
#**************************************************************************
# Load pancreas data
dat.panc = read.csv('~/Desktop/metaneighbor/pancreasXexpr.csv',header=F)
set.panc = read.csv('~/Desktop/metaneighbor/pancreasDdset.csv',header=F)
lab.panc = read.csv('~/Desktop/metaneighbor/pancreasYlabels.csv',header=F)
set.panc = as.matrix(lab.panc) %*% as.matrix(set.panc)
dset = matrix(0,12675,1);
dset[set.panc[,1]==1] = "Seger"
dset[set.panc[,2]==1] = "Mur"
dset[set.panc[,3]==1] = "Bar"
ctyp = matrix(0,12675,1);
ctyp[lab.panc[,1]==1] = "alpha";
ctyp[lab.panc[,2]==1] = "beta";
ctyp[lab.panc[,3]==1] = "gamma";
ctyp[lab.panc[,4]==1] = "delta";
ctyp[lab.panc[,5]==1] = "epsilon";
ctyp[lab.panc[,6]==1] = "endocrine";
ctyp[lab.panc[,7]==1] = "psc";
lab.panc[,7]==1
ctyp[lab.panc[,7]==1]
dset = matrix(0,12675,1);
dset[set.panc[,1]==1] = "Seger"
dset[set.panc[,2]==1] = "Mur"
dset[set.panc[,3]==1] = "Bar"
ctyp = matrix(0,12675,1);
ctyp[lab.panc[,1]==1] = "alpha";
ctyp[lab.panc[,2]==1] = "beta";
ctyp[lab.panc[,3]==1] = "gamma";
ctyp[lab.panc[,4]==1] = "delta";
ctyp[lab.panc[,5]==1] = "epsilon";
ctyp[lab.panc[,6]==1] = "endocrine";
ctyp[lab.panc[,7]==1] = "psc";
ctyp[lab.panc[,8]==1] = "acinar";
ctyp[lab.panc[,9]==1] = "ductal";
ctyp[lab.panc[,10]==1] = "endo";
ctyp[lab.panc[,11]==1] = "mhc2";
ctyp[lab.panc[,12]==1] = "mast";
ctyp[lab.panc[,13]==1] = "coexp";
ctyp[lab.panc[,14]==1] = "unclass";
ctyp[lab.panc[,15]==1] = "na";
ctyp[lab.panc[,16]==1] = "alpha";
ctyp[lab.panc[,17]==1] = "beta";
ctyp[lab.panc[,18]==1] = "gamma";
ctyp[lab.panc[,19]==1] = "delta";
ctyp[lab.panc[,20]==1] = "epsilon";
ctyp[lab.panc[,21]==1] = "acinar";
ctyp[lab.panc[,22]==1] = "ductal";
ctyp[lab.panc[,23]==1] = "endo";
ctyp[lab.panc[,24]==1] = "mesen";
ctyp[lab.panc[,25]==1] = "unclass";
ctyp[lab.panc[,26]==1] = "alpha";
ctyp[lab.panc[,27]==1] = "beta";
ctyp[lab.panc[,28]==1] = "gamma";
ctyp[lab.panc[,29]==1] = "delta";
ctyp[lab.panc[,30]==1] = "epsilon";
ctyp[lab.panc[,31]==1] = "psc";
ctyp[lab.panc[,32]==1] = "psc";
ctyp[lab.panc[,33]==1] = "acinar";
ctyp[lab.panc[,34]==1] = "ductal";
ctyp[lab.panc[,35]==1] = "schwann";
ctyp[lab.panc[,36]==1] = "endo";
ctyp[lab.panc[,37]==1] = "macro";
ctyp[lab.panc[,38]==1] = "mast";
ctyp[lab.panc[,39]==1] = "tcell"
#**************************************************************************
# Running MetaNeighbor
colN = paste(dset,ctyp,sep="-")
colN = paste(colN,as.character(seq(1,dim(dat.panc)[1])),sep="-")
exper1 = SummarizedExperiment(assays=list(t(as.matrix(log2(dat.panc/10+1)))))
exper1@colData@listData[["sample_id"]] = seq(1,dim(dat.panc)[1])
exper1@colData@listData[["study_id"]] = dset
exper1@colData@listData[["cell_type"]] = ctyp
exper1@colData@rownames = colN
var_genes = variableGenes(dat = exper1, exp_labels = exper1$study_id)
?variableGenes
??variableGenes
library(cellrangerRkit)
var_genes = variableGenes(dat = exper1, exp_labels = exper1$study_id)
?variableGenes
??variableGenes
source("https://bioconductor.org/biocLite.R")
biocLite("MetaNeighbor")
install.packages("BiocManager")
set.panc = read.csv('~/Desktop/metaneighbor/pancreasDdset.csv',header=F)
setwd("/home/zhihuan/Downloads/Hypoxemia - LSTM/PO2data/PO2数据/")
### Find significant features
data = read.csv("expanded.all.data.merged.imputed.calculated.shrinked.csv", header = T, stringsAsFactors = F)
HYPOXEMIA_CLASS = data$HYPOXEMIA_CLASS
group1 = data[HYPOXEMIA_CLASS == "Normal",]
group2 = data[HYPOXEMIA_CLASS == "Mild",]
group3 = data[HYPOXEMIA_CLASS == "Morderate",]
group4 = data[HYPOXEMIA_CLASS == "Severe",]
colnames(group1)
i = 1
hist(group1[,1])
hist(group1[,10])
hist(group1[,15])
head(airquality)
kruskal.test(Ozone ~ Month, data = airquality)
kruskal.test(. ~ Month, data = airquality)
colnames(group1)[,2:4]
colnames(group1)[2:4]
colnames(group1)
colnames(group1)[-2]
colnames(group1)[-40]
colnames(group1)
colnames(group1)[c(-6,-7,-10,-40]
colnames(group1)[c(-6,-7,-10,-40)]
for(i in colnames(group1)[c(-6,-7,-10,-40)]){
results[[i]] <- kruskal.test(formula(paste(i, "~ HYPOXEMIA_CLASS")), data = ados.sim)
}
results[[i]] <- kruskal.test(formula(paste(i, "~ HYPOXEMIA_CLASS")), data = data)
results <- list()
for(i in colnames(group1)[c(-6,-7,-10,-40)]){
results[[i]] <- kruskal.test(formula(paste(i, "~ HYPOXEMIA_CLASS")), data = data)
}
results <- list()
for(i in colnames(group1)[c(-1,-6,-7,-10,-40)]){
results[[i]] <- kruskal.test(formula(paste(i, "~ HYPOXEMIA_CLASS")), data = data)
}
colnames(group1)
for(i in colnames(group1)[c(-1,-2,-3,-6,-7,-10,-40)]){
results[[i]] <- kruskal.test(formula(paste(i, "~ HYPOXEMIA_CLASS")), data = data)
}
sum(is.na(dara))
sum(is.na(data))
kruskal.test(formula(paste("HOURS ~ HYPOXEMIA_CLASS")), data = data)
kruskal.test(formula(paste("FLUID_BALANCE ~ HYPOXEMIA_CLASS")), data = data)
aov(formula(paste("HOURS ~ HYPOXEMIA_CLASS")), data = data)
aov = aov(formula(paste("HOURS ~ HYPOXEMIA_CLASS")), data = data)
summary(aov)
aov$coefficients
aov$fitted.values
aov$residuals
aov$'Pr(>F)'
AOV
aov
aov[[1]]
summary(aov)
summary(aov)$'Pr(>F)'
aov_sum=summary(aov)
aov[[1]]
aov[[1]]$'Pr(>F)'
unlist(summary(aov))
unlist(summary(aov))$'Pr(>F)'
unlist(summary(aov))$'Pr(>F)1'
unlist(summary(aov))$`Pr(>F)1`
unlist(summary(aov)[-]
unlist(summary(aov)[-1]
unlist(summary(aov))[-1]
unlist(summary(aov))[9]
for(i in colnames(group1)[c(-1,-2,-3,-6,-7,-10,-40)]){
aov_res <- aov(formula(paste(i, "~ HYPOXEMIA_CLASS")), data = data)
unlist(summary(aov_res))[9]
}
colnames(group1)[c(-1,-2,-3,-6,-7,-10,-40)]
aov_res <- aov(formula(paste("AGE", "~ HYPOXEMIA_CLASS")), data = data)
unlist(summary(aov_res))[9]
aov_res <- aov(formula(paste("k", "~ HYPOXEMIA_CLASS")), data = data)
aov_res <- aov(formula(paste("K", "~ HYPOXEMIA_CLASS")), data = data)
unlist(summary(aov_res))[9]
aov_res <- aov(formula(paste("PO2", "~ HYPOXEMIA_CLASS")), data = data)
unlist(summary(aov_res))[9]
aov_res <- aov(formula(paste("HOURS", "~ HYPOXEMIA_CLASS")), data = data)
unlist(summary(aov_res))[9]
aov_res <- aov(formula(paste("PT_prev_6_average", "~ HYPOXEMIA_CLASS")), data = data)
unlist(summary(aov_res))[9]
unlist(summary(aov_res))
aov_res <- kruskal.test(formula(paste("PT_prev_6_average", "~ HYPOXEMIA_CLASS")), data = data)
